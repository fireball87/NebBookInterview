using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace NebBookInterview.Models
{
    
    public class ProductPriceChangeDisplay
    {
        public DateTime ModifiedDate { get; private set; }
        public decimal Price { get; private set; }
        public ProductPriceChangeDisplay(ProductPriceChange change)
        {
            ModifiedDate = change.ModifiedDate;
            Price = change.Price;
        }
    }
    public class ProductPriceChange
    {
        /* On a design note, there's a couple of ways to handle doing this tracking.
         * The one I used is just to manually require it on code changing it, which is the simplest solution but
         *      also the most prone to programmer error.
         * You also could use DB triggers, this is one of the easiest methods to make sure that any changes get logged
         *      though there's wild disagreement on triggers are good in general.
         * Another option is to detect the changes before save and then to add the audits there.  I did some research
         *      into that for EF, but decided against for this sample
         * I've also pondered adding to the list via the getter and setters, but would need to do more research on
         *      that, as I don't want to load the list to interact with it, and am not nearly familiar enough with it
         *      to know if that would produce issues.*/
        
        
        // key is generated by the DB, so this isn't nullable in the DB, but if passed null will create a new entry
        // every field is private set because we do not wish our history to ever be modified
        [Key]
        public long? Id { get; private set; }
        [Required]
        public long? ProductId { get; private set; }

        [Column(TypeName="money")]
        public decimal Price { get; private set; }
        [Column(TypeName="timestamp with time zone")]
        public DateTime ModifiedDate { get; private set; }

        private ProductPriceChange()
        {
        }
        
        public ProductPriceChange(Product product)
        {
            this.ProductId = product.Id;
            this.Price = product.Price;
            this.ModifiedDate = DateTime.Now.ToUniversalTime();
        }
    }
}